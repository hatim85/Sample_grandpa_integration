"""
Implements the Δ and Δ+ functions for optimized state integration.
Applies a state delta generated by Ψ_A PVM to the global state.
"""

import copy

def apply_delta(global_state: dict, state_delta: dict) -> dict:
    """
    Applies a state delta to the global state (Δ function).
    This is a simplified deep merge.
    :param global_state: The current conceptual global state (dict).
    :param state_delta: The changes to apply (dict).
    :return: The new global state after applying the delta.
    """
    print("[Δ] Applying state delta...")

    new_state = copy.deepcopy(global_state)

    for key, delta_value in state_delta.items():
        current_value = new_state.get(key)

        if (
            isinstance(delta_value, dict)
            and delta_value is not None
            and isinstance(current_value, dict)
            and current_value is not None
        ):
            # Deep merge plain dicts
            merged = current_value.copy()
            merged.update(delta_value)
            new_state[key] = merged
        elif (
            hasattr(delta_value, 'items') and hasattr(current_value, 'items')
            and not isinstance(delta_value, dict) and not isinstance(current_value, dict)
        ):
            # Merge mappings (like Map in JS, but rare in Python)
            merged = dict(current_value)
            merged.update(dict(delta_value))
            new_state[key] = merged
        else:
            # Overwrite primitive values, lists, or other types
            new_state[key] = delta_value

    print("[Δ] State delta applied.")
    return new_state