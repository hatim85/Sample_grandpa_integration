/target
Cargo.lock


## Endpoint: /authorizer/is_authorized (Success Case)
param_hex: "4a56bd549630925b07004a320ece3d57c02b72214bce79988cdf0ac57b1ab55ba5e11c86fd829d7d7b88bb064d4d7dc1b6cae8861522fab7d7216117ce45bc32c635286b82727b322b7a5e16d13255ce4aa63f6b3e2a04ef7fdbe5f5367df8080000000000000000"
package_hex: "a1014a56bd549630925b07004a320ece3d57c02b72214bce79988cdf0ac57b1ab55ba5e11c86fd829d7d7b88bb064d4d7dc1b6cae8861522fab7d7216117ce45bc32c635286b82727b322b7a5e16d13255ce4aa63f6b3e2a04ef7fdbe5f5367df8080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004010000000000000000000000000000000000000000000000000000000000000000000000846d792074657374207061796c6f616420666f7220617574686f72697a6174696f6e40420f000000000020a107000000000000000000"
core_index_hex: "0100"

## Endpoint: /service/refine
service_id_hex: "01000000"
payload_hex: "2c48656c6c6f2c204a414d21"
package_hash_hex: "0101010101010101010101010101010101010101010101010101010101010101"
context_hex: "00"
auth_code_hash_hex: "0202020202020202020202020202020202020202020202020202020202020202"

## Endpoint: /service/accumulate
slot_hex: "01000000"
service_id_hex: "01000000"
items_hex: "04000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a1014a56bd549630925b07004a320ece3d57c02b72214bce79988cdf0ac57b1ab55ba5e11c86fd829d7d7b88bb064d4d7dc1b6cae8861522fab7d7216117ce45bc32c635286b82727b322b7a5e16d13255ce4aa63f6b3e2a04ef7fdbe5f5367df80800000000000000004c42a9048aab5bcb71e1b7aa798333aac55cd1118538a63115fdf0b3e046e10d002c776f726b206f7574707574"

## Endpoint: /service/on_transfer
slot_hex: "01000000"
service_id_hex: "01000000"
transfers_hex: "047b00000001000000e803000000000000000500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040420f0000000000"



Excellent! The script ran successfully, and you now have all the valid test data you need. ðŸ¥³

Now, let's use that data to test your running API. Make sure your server is running in one terminal window (RUST_LOG=info cargo run), and you'll run the following curl commands in a separate terminal window.

You will need to copy the hex strings from your output and paste them into the commands below where it says <PASTE ... HERE>.

1. Test the Authorizer (Success Case)
This command sends a validly signed package to the authorizer. Since it's the first time this user (public key) is seen, the nonce of 0 is correct.

Bash

curl --location 'http://127.0.0.1:8080/authorizer/is_authorized' \
--header 'Content-Type: application/json' \
--data '{
    "param_hex": "4a56bd549630925b07004a320ece3d57c02b72214bce79988cdf0ac57b1ab55ba5e11c86fd829d7d7b88bb064d4d7dc1b6cae8861522fab7d7216117ce45bc32c635286b82727b322b7a5e16d13255ce4aa63f6b3e2a04ef7fdbe5f5367df8080000000000000000",
    "package_hex": "a1014a56bd549630925b07004a320ece3d57c02b72214bce79988cdf0ac57b1ab55ba5e11c86fd829d7d7b88bb064d4d7dc1b6cae8861522fab7d7216117ce45bc32c635286b82727b322b7a5e16d13255ce4aa63f6b3e2a04ef7fdbe5f5367df8080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004010000000000000000000000000000000000000000000000000000000000000000000000846d792074657374207061796c6f616420666f7220617574686f72697a6174696f6e40420f000000000020a107000000000000000000",
    "core_index_hex": "0100"
}'
Expected Output: A JSON response where the output_hex value is the exact same as the param_hex you sent. This indicates successful authorization.

Check Server Logs: You should see Authorization successful. in your server's terminal.

2. Test the Accumulate Function
This simulates the step after a successful authorization, where the service's state is updated. Critically, this will increment the user's nonce from 0 to 1.

Bash

curl --location 'http://127.0.0.1:8080/service/accumulate' \
--header 'Content-Type: application/json' \
--data '{
    "slot_hex": "01000000",
    "service_id_hex": "01000000",
    "items_hex": "04000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a1014a56bd549630925b07004a320ece3d57c02b72214bce79988cdf0ac57b1ab55ba5e11c86fd829d7d7b88bb064d4d7dc1b6cae8861522fab7d7216117ce45bc32c635286b82727b322b7a5e16d13255ce4aa63f6b3e2a04ef7fdbe5f5367df80800000000000000004c42a9048aab5bcb71e1b7aa798333aac55cd1118538a63115fdf0b3e046e10d002c776f726b206f7574707574"
}'
Expected Output: {"hash_hex":null}

Check Server Logs: You should see a log message like Nonce for pk ... incremented to 1.

3. Test the Authorizer Again (Replay Attack Failure)
Now, re-run the exact same command from Step 1. This time it should fail because the service now expects a nonce of 1, but the request is still sending 0. This proves your replay protection is working.

Expected Output: A JSON response where output_hex is a hash that represents the "INVALID_NONCE" error.

Check Server Logs: You should see Auth failed: Invalid nonce. Expected 1, got 0.

4. Test the Refine Function
This tests the core stateless logic of your service.

Bash

curl --location 'http://127.0.0.1:8080/service/refine' \
--header 'Content-Type: application/json' \
--data '{
    "service_id_hex": "01000000",
    "payload_hex": "2c48656c6c6f2c204a414d21",
    "package_hash_hex": "0101010101010101010101010101010101010101010101010101010101010101",
    "context_hex": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "auth_code_hash_hex": "0202020202020202020202020202020202020202020202020202020202020202"
}'
Expected Output: A JSON response with a work_output_hex field. If you decode this hex, it will be the bytes for "Refined: Hello, JAM!".

5. Test the on_transfer Function
This tests the stateful logic for handling transfers.

Bash

curl --location 'http://127.0.0.1:8080/service/on_transfer' \
--header 'Content-Type: application/json' \
--data '{
    "slot_hex": "01000000",
    "service_id_hex": "01000000",
    "transfers_hex": "047b00000001000000e803000000000000000500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040420f0000000000"
}'
Expected Output: {"status":"ok"}

Check Server Logs: You should see messages indicating that a command was decoded and that the new state was written with an updated counter.











//************************************* accumulate ****************************************************
Here are the curl commands with inline JSON payloads for testing the PVM and accumulate integration:

1. Basic Test with Single Report
bash
curl -X POST http://127.0.0.1:8000/accumulate/process \
  -H "Content-Type: application/json" \
  -d '{
    "slot": 123,
    "reports": [
      {
        "results": [
          {
            "service_id": 1,
            "result": {
              "ok": "0x0102030405060708090a0b0c0d0e0f10"
            }
          }
        ],
        "package_spec": {
          "hash": "00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff"
        }
      }
    ]
  }'
2. Test with Multiple Reports
bash
curl -X POST http://127.0.0.1:8000/accumulate/process \
  -H "Content-Type: application/json" \
  -d '{
    "slot": 124,
    "reports": [
      {
        "results": [{"service_id": 1, "result": {"ok": "0x010203"}}],
        "package_spec": {"hash": "0011111111111111111111111111111111111111111111111111111111111111"}
      },
      {
        "results": [{"service_id": 2, "result": {"ok": "0xdeadbeef"}}],
        "package_spec": {"hash": "2200000000000000000000000000000000000000000000000000000000000000"}
      }
    ]
  }'
3. Test Error Case - Invalid Payload
bash
curl -X POST http://127.0.0.1:8000/accumulate/process \
  -H "Content-Type: application/json" \
  -d '{"invalid": "payload"}'
4. Test Error Case - Missing Required Fields
bash
curl -X POST http://127.0.0.1:8000/accumulate/process \
  -H "Content-Type: application/json" \
  -d '{"slot": 123}'
5. Check Current State
bash
curl http://127.0.0.1:8000/accumulate/state
6. Test with Core Index
bash
curl -X POST http://127.0.0.1:8000/accumulate/process \
  -H "Content-Type: application/json" \
  -d '{
    "slot": 125,
    "reports": [
      {
        "core_index": 5,
        "results": [{"service_id": 3, "result": {"ok": "0xff00ff"}}],
        "package_spec": {"hash": "3300000000000000000000000000000000000000000000000000000000000000"}
      }
    ]
  }'


curl -X POST http://127.0.0.1:8000/authorize \
  -H "Content-Type: application/json" \
  -d '{
    "public_key": "2b218e86b49855b30fcd852c9761e43f0841149e1f66b859973fbe0dac0a6e4b",
    "signature": "bbdfb9162077d44a2e7e5dcb0e421b8129fb821cb629491f4b6662d1007e4261fafb976d55c11552f4751f6f2a1695672771ddfe4b71e5e801cd376da12ff70d",
    "payload": {
      "action": "authorize",
      "data": "test_data"
    }
  }'
{"authorized":true,"public_key":"2b218e86b49855b30fcd852c9761e43f0841149e1f66b859973fbe0dac0a6e4b","nonce":6,"timestamp":"2025-09-15T08:54:47.180765+00:00"}%                         
(venv) hatim@Hatims-MacBook-Air server % 


curl -X POST http://127.0.0.1:8000/authorize \
  -H "Content-Type: application/json" \
  -d '{
    "public_key": "YOUR_PUBLIC_KEY",
    "signature": "YOUR_SIGNATURE",
    "payload": {
      "action": "authorize",
      "data": "test_data"
    }
  }'


  curl -X POST http://127.0.0.1:8000/authorize -H "Content-Type: application/json" -d '{"public_key": "eea8ee0a210980e80769293bcbc1c4a79f74c83af48c97c8c0e921d6f1a95ca1", "signature": "eee36664802f8d993d1fcdd59067619267e95ea70685bc0049fe61dddf9108d57a0d0d9bea7a4ded83f244f62d5f90b830df26f82ce2d2d02efd338af6a1d908", "payload": {"service_id": 1, "core": 0, "slot": 100, "work_package": {"items": [{"service_id": 1, "payload_data": "Hello JAM Authorization!", "gas_limit": 1000000}]}}}'

You can copy and paste these commands directly into your terminal. The responses will show you the processing results and any potential errors.